This is called a "decorator" in Python, it is used to modify the behavior of a function or method:
@app.something

To use it as fastapi decorator, you need to import FastAPI first:
from typing import Union
from fastapi import FastAPI
app = FastAPI()

FastAPI uses BaseModel from Pydantic to define data models. This allows you to create structured data types that can be used in your API endpoints. For example, you can define a Post model like this:
from pydantic import BaseModel
class Post(BaseModel):
    title: str
    content: str
    published: bool = True
    rating: Optional[int] = None

For optional requests, use a defaulted field; for full optional default to None
For str valued requests, if you use int; it converts int to str automatically. Look out.

CRUD applications are common in web development. They are composed of Create, Read, Update, and Delete operations. FastAPI makes it easy to implement these operations with its routing system.

For Create operations, you can use the `@app.post` decorator to define a route that handles POST requests. This is typically used to create new resources.
For Read operations, you can use the `@app.get` decorator to define a route that handles GET requests. This is used to retrieve resources.
For Update operations, you can use the `@app.put` decorator to define a route that handles PUT requests. This is used to update existing resources, and it usually requires sending the entire resource data to be updated.
You can also use the `@app.patch` decorator for partial updates, which allows you to modify only specific fields of a resource without sending the entire resource data.
For Delete operations, you can use the `@app.delete` decorator to define a route that handles DELETE requests. This is used to remove resources.

When creating a new resource, an ID will typically be generated automatically by the server.
You will use this ID to reference the resource in subsequent operations, such as reading, updating, or deleting it.
This is how you use the ID in CRUD operations, for example a read operation:
@app.get("/posts/{post_id}")

DON'T FORGET: FastAPI searches for the path from top to bottom, so if you have a path that matches multiple routes, the first one defined will be used.

To create a python package, you need to create a directory with an `__init__.py` file inside it. This file can be empty or contain initialization code for the package.

The way db queries work is sequential; so if you want a search for a keyword in a query you have to do it BEFORE limit and offset.

To be secure about credentials and sensitive information, you can use environment variables. This way, you can keep your credentials out of your codebase and avoid hardcoding them.
To do this in FastAPI, you can use the `os` module to read environment variables. For example:
If you want to use a database URL stored in an environment variable, you can do it like this:
import os
SQLALCHEMY_DATABASE_URL = os.getenv("SQLALCHEMY_DATABASE_URL")

To set an environment variable in your terminal, you can use the following command:
export SQLALCHEMY_DATABASE_URL="whatever_your_database_url_is"

The difference between schemas and models in FastAPI is that schemas are used for data validation and serialization, while models are used for database interactions.
Here is what it looks like:

Front-end ---(Schemas)---> FastAPI (API) ---(Models)---> Database

For schemas, you can use Pydantic's `BaseModel` to define the structure of your data.
The structure will give you the ability to validate incoming data and serialize outgoing data.
If the data does not match the schema, FastAPI will automatically return a 422 Unprocessable Entity error with details about the validation errors.

For models, you can use SQLAlchemy to define the structure of your database tables.
The structure will give you the ability to interact with the database, such as creating, reading, updating, and deleting records.

Don't forget to auth the new request in Postman with bearer token.

To allow frontend and backend to communicate, you need to set up CORS (Cross-Origin Resource Sharing) in your FastAPI application.
You can do this by adding the `CORSMiddleware` to your FastAPI app.
However, you should be careful about which origins you allow to access your API, as this can expose your API to security risks.